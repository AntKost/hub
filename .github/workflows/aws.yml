name: CI/CD Pipeline - Hub

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.0"
          terraform_wrapper: false
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker image
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t hub-service:${IMAGE_TAG} .
          docker tag hub-service:${IMAGE_TAG} $ECR_REGISTRY/${{ vars.hub_ecr_repository_name }}:${IMAGE_TAG}
          docker push $ECR_REGISTRY/${{ vars.hub_ecr_repository_name }}:${IMAGE_TAG}
          echo "IMAGE_URI=$ECR_REGISTRY/${{ vars.hub_ecr_repository_name }}:${IMAGE_TAG}" >> "$GITHUB_OUTPUT"
  
      - name: Configure AWS Credentials for Terraform
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile rv-terraform
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile rv-terraform

      - name: Get current task definition
        id: get_task_def
        run: |
          HUB_TASK_DEF_LAST=$(aws ecs describe-task-definition --task-definition="hub" | jq '.taskDefinition.taskDefinitionArn')
          echo $HUB_TASK_DEF_LAST
          echo "hub_task_def_last=$HUB_TASK_DEF_LAST" >> $GITHUB_OUTPUT
  
      - name: Terraform Init
        run: |
          cd ./terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd ./terraform
          terraform validate

      - name: Terraform Plan
        env:
          TF_VAR_hub_image: ${{ steps.build.outputs.IMAGE_URI }}
        id: plan
        run: |
          cd ./terraform
          echo $TF_VAR_hub_image
          terraform plan -out=tfplan

      - name: Terraform Apply
        id: apply
        env:
          TF_VAR_hub_image: ${{ steps.build.outputs.IMAGE_URI }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd ./terraform
          echo $TF_VAR_hub_image
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf_outputs
        shell: bash
        run: |
          HUB_TASK_DEF_NEW=$(terraform -chdir=./terraform output -raw hub_task_definition_arn)
          HUB_CODEDEPLOY_APP_NAME=$(terraform -chdir=./terraform output -raw codedeploy_hub_app_name)
          HUB_CODEDEPLOY_DEPLOYMENT_GROUP=$(terraform -chdir=./terraform output -raw codedeploy_hub_deployment_group_name)
          echo "hub_task_def_new=$HUB_TASK_DEF_NEW" >> $GITHUB_OUTPUT
          echo "hub_codedeploy_app=$HUB_CODEDEPLOY_APP_NAME" >> $GITHUB_OUTPUT
          echo "hub_codedeploy_deploy_group=$HUB_CODEDEPLOY_DEPLOYMENT_GROUP" >> $GITHUB_OUTPUT
          echo "Terraform outputs retrieved:"
          echo "hub_task_def_new=$HUB_TASK_DEF_NEW"
          echo "hub_codedeploy_app=$HUB_CODEDEPLOY_APP_NAME"
          echo "hub_codedeploy_deploy_group=$HUB_CODEDEPLOY_DEPLOYMENT_GROUP"
      
      - name: Generate HUB AppSpec and Task Definition
        if: ${{ steps.get_task_def.outputs.HUB_TASK_DEF_LAST != steps.tf_outputs.outputs.hub_task_def_new }}
        env:
          container_port: 8000
          container_name: hub
        run: |
          export TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition="$container_name" | jq '.taskDefinition.taskDefinitionArn')
          cat <<EOF > hub_appspec.json
          {
            "version": 1,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": $TASK_DEF_ARN,
                    "LoadBalancerInfo": {
                      "ContainerName": "hub",
                      "ContainerPort": 8000
                    }
                  }
                }
              }
            ]
          }
          EOF
          cat hub_appspec.json
          aws ecs describe-task-definition --task-definition "hub" --query taskDefinition > task-definition.json

      - name: ECS task deployment using CodeDeploy
        if: ${{ steps.get_task_def.outputs.HUB_TASK_DEF_LAST != steps.tf_outputs.outputs.hub_task_def_new }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        env:
          ACTIONS_STEP_DEBUG: true #enable step debug logging
        with:
          task-definition: task-definition.json
          service: hub-service
          cluster: road-vision-cluster
          wait-for-service-stability: false
          codedeploy-appspec: hub_appspec.json
          codedeploy-application: hub-codedeploy-app
          codedeploy-deployment-group: hub-deployment-group
